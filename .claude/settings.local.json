{
  "permissions": {
    "allow": [
      "Bash(pnpm build:*)",
      "Bash(pnpm install:*)",
      "Bash(ls:*)",
      "Bash(echo $?)",
      "Bash(npx prisma:*)",
      "Bash(pnpm add:*)",
      "Bash(pnpm dev:*)",
      "Bash(if [ -f .env.local ])",
      "Bash(then echo \"文件存在\")",
      "Bash(else echo \"文件不存在\")",
      "Bash(fi)",
      "Bash(openssl rand:*)",
      "Bash(curl:*)",
      "Bash(pnpm docker:dev:*)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_db?schema=public' npx prisma db push --accept-data-loss)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_db?schema=public' npx tsx scripts/create-test-user.ts)",
      "Bash(lsof:*)",
      "Bash(xargs kill:*)",
      "Bash(cat:*)",
      "WebSearch",
      "Bash(kill:*)",
      "Bash(python3:*)",
      "Bash(pnpm workers:*)",
      "Bash(redis-cli:*)",
      "Bash(docker exec:*)",
      "Bash(DATABASE_URL='postgres://postgres.kzkczxxinltosfcnesjp:JU0cC0VBpKDQQ8x2@aws-1-us-east-1.pooler.supabase.com:6543/postgres?sslmode=require&pgbouncer=true' npx prisma db push --accept-data-loss)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_starter?schema=public' npx prisma db push --accept-data-loss)",
      "Bash(ps:*)",
      "Read(//private/tmp/**)",
      "Bash(pkill:*)",
      "Bash(psql:*)",
      "Bash(docker ps:*)",
      "Read(//dev/fd/**)",
      "Bash(pnpm run build:*)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_db?schema=public' npx tsx scripts/retry-failed-workflow.ts cmh73qnwm0001bxqxqohktczl)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_starter?schema=public' npx tsx scripts/retry-failed-workflow.ts cmh73qnwm0001bxqxqohktczl)",
      "WebFetch(domain:api.evolink.ai)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_db?schema=public' npx tsx scripts/check-workflow-status.ts)",
      "Bash(open:*)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_db?schema=public' npx tsx scripts/debug-workflow.ts)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_starter?schema=public' npx tsx scripts/debug-workflow.ts)",
      "Bash(npx tsx:*)",
      "Bash(source .env.local)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_starter?schema=public' npx tsx scripts/test-image-gen-full.ts)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_starter?schema=public' docker exec workflow-postgres psql -U postgres -d saas_starter -c \"SELECT id, \"\"imageUrl\"\", \"\"createdAt\"\" FROM workflow_executions ORDER BY \"\"createdAt\"\" DESC LIMIT 1;\")",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_starter?schema=public' npx tsx:*)",
      "Bash(DATABASE_URL:*)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_starter?schema=public' psql -c \"SELECT \"\"imageUrl\"\" FROM products ORDER BY \"\"createdAt\"\" DESC LIMIT 1;\")",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_starter?schema=public' npx tsx scripts/check-workflow-status.ts cmhd7h90u0001hxn5z0nlbni1)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_starter?schema=public' npx tsx scripts/retry-failed-workflow.ts cmhd7h90u0001hxn5z0nlbni1)",
      "Bash(DATABASE_URL='postgresql://postgres:postgres@localhost:5432/saas_starter?schema=public' npx tsx scripts/retry-listing-generation.ts cmhd7h90u0001hxn5z0nlbni1)",
      "Bash(tee:*)"
    ],
    "deny": [],
    "ask": []
  }
}