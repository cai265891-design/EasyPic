// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  workflows WorkflowExecution[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

// ============================================
// 工作流系统模型
// ============================================

enum WorkflowStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum WorkflowStep {
  IMAGE_DOWNLOAD
  IMAGE_RECOGNITION
  LISTING_GENERATION
  IMAGE_SET_GENERATION
}

model WorkflowExecution {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 状态机字段
  status       WorkflowStatus @default(PENDING)
  currentStep  WorkflowStep?

  // 输入数据
  imageUrl        String
  category        String?
  brand           String?
  productName     String?
  features        String?  @db.Text
  specifications  String?  @db.Text

  // 输出数据
  productId String?   @unique
  listingId String?   @unique

  // 版本控制
  version       Int      @default(1)
  parentId      String?
  parent        WorkflowExecution?  @relation("WorkflowVersions", fields: [parentId], references: [id], onDelete: SetNull)
  children      WorkflowExecution[] @relation("WorkflowVersions")

  // 重新生成信息
  regenerateReason String?

  // 元数据
  metadata  Json      @default("{}")
  error     String?   @db.Text

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  product   Product?
  listing   Listing?
  regenerationLogs RegenerationLog[]

  @@index([userId, status])
  @@index([createdAt])
  @@index([parentId])
  @@map(name: "workflow_executions")
}

model Product {
  id          String   @id @default(cuid())
  workflowId  String   @unique
  workflow    WorkflowExecution @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  imageUrl    String   // 本地图片 URL (localhost)
  publicImageUrl String?  // 公网可访问的图片 URL (R2/S3)
  description String   @db.Text
  keywords    Json     @default("[]")
  confidence  Float?

  listing     Listing?

  createdAt   DateTime @default(now())

  @@map(name: "products")
}

model Listing {
  id          String   @id @default(cuid())
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  workflowId  String   @unique
  workflow    WorkflowExecution @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  title       String   @db.VarChar(500)
  description String   @db.Text
  bulletPoints Json    @default("[]")
  keywords    Json     @default("[]")
  imagePrompts Json?   @default("[]") // AI 生成的图片提示词

  qualityScore Float?
  approved    Boolean  @default(false)

  // 版本控制
  version     Int      @default(1)
  isActive    Boolean  @default(true)

  // 用户反馈
  userRating   Int?    @db.SmallInt
  userFeedback String? @db.Text

  imageSet    ImageSet?

  createdAt   DateTime @default(now())

  @@index([isActive])
  @@map(name: "listings")
}

model ImageSet {
  id        String   @id @default(cuid())
  listingId String   @unique
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  jobId     String   @unique
  images    Json     @default("[]")
  status    String   @default("processing")

  // 版本控制
  version       Int      @default(1)
  isActive      Boolean  @default(true)
  regeneratedIndices Json? @default("null")

  totalCost Decimal  @db.Decimal(10, 4) @default(0)

  createdAt   DateTime @default(now())
  completedAt DateTime?

  productImages ProductImage[]

  @@index([isActive])
  @@map(name: "image_sets")
}

model ProductImage {
  id        String   @id @default(cuid())
  imageSetId String
  imageSet  ImageSet @relation(fields: [imageSetId], references: [id], onDelete: Cascade)

  index         Int
  bulletPoint   String   @db.Text
  imageUrl      String
  thumbnailUrl  String
  style         String

  // 版本控制
  version       Int      @default(1)
  isActive      Boolean  @default(true)

  // 生成元数据
  generationTime Int?
  cost          Decimal  @db.Decimal(10, 4) @default(0)
  prompt        String?  @db.Text

  createdAt     DateTime @default(now())

  @@index([imageSetId, index])
  @@index([isActive])
  @@map(name: "product_images")
}

model RegenerationLog {
  id           String   @id @default(cuid())
  workflowId   String
  workflow     WorkflowExecution @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  step         String
  reason       String
  userFeedback String?  @db.Text

  oldVersion   Int
  newVersion   Int

  costIncurred Decimal  @db.Decimal(10, 4) @default(0)

  createdAt    DateTime @default(now())

  @@index([workflowId])
  @@index([createdAt])
  @@map(name: "regeneration_logs")
}
